/**
 * GST E-Invoice Model
 * Defines schema for GST e-invoices
 */

const mongoose = require('mongoose');
const Schema = mongoose.Schema;

const eInvoiceSchema = new Schema(
  {
    tenant: {
      type: Schema.Types.ObjectId,
      ref: 'Tenant',
      required: [true, 'Tenant is required'],
    },
    invoice: {
      type: Schema.Types.ObjectId,
      ref: 'GSTInvoice',
      required: [true, 'Invoice reference is required'],
    },
    status: {
      type: String,
      enum: ['PENDING', 'GENERATED', 'CANCELLED', 'FAILED'],
      default: 'PENDING',
    },
    // IRN (Invoice Reference Number) - unique hash generated by IRP
    irn: {
      type: String,
      trim: true,
    },
    // QR Code data (base64 encoded)
    qrCode: {
      type: String,
    },
    // Acknowledgement details
    acknowledgementNumber: {
      type: String,
      trim: true,
    },
    acknowledgementDate: {
      type: Date,
    },
    // Signed invoice data from IRP
    signedInvoice: {
      type: String,
    },
    // JSON payload sent to IRP
    requestPayload: {
      type: Object,
    },
    // Response received from IRP
    responsePayload: {
      type: Object,
    },
    // Cancellation details
    cancellationReason: {
      type: String,
      enum: [
        'DUPLICATE',
        'DATA_ENTRY_MISTAKE',
        'ORDER_CANCELLED',
        'OTHERS'
      ],
    },
    cancellationRemarks: {
      type: String,
      trim: true,
      maxlength: [100, 'Cancellation remarks cannot exceed 100 characters'],
    },
    cancelledDate: {
      type: Date,
    },
    // Error details in case of failure
    errorDetails: {
      errorCode: String,
      errorMessage: String,
      timestamp: Date,
    },
    // Generation attempts tracking
    generationAttempts: {
      type: Number,
      default: 0,
    },
    lastAttemptDate: {
      type: Date,
    },
    // Creator tracking
    createdBy: {
      type: Schema.Types.ObjectId,
      ref: 'User',
    },
    updatedBy: {
      type: Schema.Types.ObjectId,
      ref: 'User',
    },
  },
  {
    timestamps: true,
  }
);

// Indexes for efficient querying
eInvoiceSchema.index({ tenant: 1, invoice: 1 }, { unique: true });
eInvoiceSchema.index({ tenant: 1, irn: 1 });
eInvoiceSchema.index({ tenant: 1, status: 1 });

// Pre-save middleware to update invoice status
eInvoiceSchema.pre('save', async function (next) {
  // Skip if this is a new document
  if (this.isNew) return next();

  // If status has changed to GENERATED or CANCELLED, update the invoice
  if (this.isModified('status')) {
    try {
      const GSTInvoice = mongoose.model('GSTInvoice');
      await GSTInvoice.findByIdAndUpdate(this.invoice, {
        'einvoice.status': this.status,
        'einvoice.irn': this.irn || null,
        'einvoice.acknowledgementNumber': this.acknowledgementNumber || null,
        'einvoice.acknowledgementDate': this.acknowledgementDate || null,
      });
    } catch (error) {
      console.error('Error updating invoice e-invoice status:', error);
    }
  }
  next();
});

const EInvoice = mongoose.model('EInvoice', eInvoiceSchema);

module.exports = EInvoice;